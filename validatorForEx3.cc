/*
#	Validate testdatas for Ex3 generated by generatorForEx3.cc.
*/
#include<iostream>
#include<fstream>
#include<string>
#include<sstream>
#include<cstdlib>
void validateTestdata(std::string);

int main(){
	std::string filename1 = "in3-1";
	std::string filename2 = "in3-2";
	std::string filename3 = "in3-3";
	//std::string filename4 = "in3-4";

	validateTestdata(filename1);
	validateTestdata(filename2);
	validateTestdata(filename3);
	//	validateTestdata(filename4);

	return 0;
}


/* ãƒœãƒ„
// validate the testdata and display its results.
void validateTestdata(std::string filename){
	std::ifstream reading_file;
	reading_file.open(filename, std::ios::in);
	
	std::string reading_line_buffer;

	std::cout << "reading " << filename << "..." << std::endl;
	
	int line_count=1;
	std::getline(reading_file, reading_line_buffer);
	std::cout << 
	while(!reading_file.eof()){
		line_count++;
		std::getline(reading_file, reading_line_buffer);
		std::cout << reading_line_buffer << std::endl;
		
		}
		}
*/

// validate the testdata and display its results.
void validateTestdata(std::string filename){
  std::ifstream ifs(filename.c_str());
  int n,m,e,ni,mi,ei, count=0, flag=0;
  std::string str;

  std::cout << "In " << filename << "," <<  std::endl;
  while(getline(ifs, str)){
    std::string str1, str2, str3;
    std::istringstream stream(str);
    getline(stream, str1, ' ');
    getline(stream, str2, ' ');
    getline(stream, str3, ' ');
    ni = atoi(str1.c_str());
    mi = atoi(str2.c_str());
    ei = atoi(str3.c_str());
    if(count==0){
      n=ni; m=mi; e=ei;
      if(n<2||n>100000){
	std::cout << "Error* n = " << n << " is incorrect" << std::endl;
	flag=1;
      }
      if(m<1||m>100000){
	std::cout << "Error* m = " << m << " is incorrect" << std::endl;
	flag=1;
      }
      if(e<0||e>100000){
	std::cout << "Error* e = " << e << " is incorrect" << std::endl;
	flag=1;
      }
      if(flag==1)break;
    }else if(count>e){
      std::cout << "Error* number of line exceed E" << std::endl;
	  flag=1;
	  break;
    }else {
      if(ni<0||ni>n){
	std::cout << "Error* n value in line " << count+1 <<  " is incorrect\n";
	flag=1;
      }
      if(mi<0||mi>m){
	std::cout << "Error* m value in line " << count+1 <<  " is incorrect\n";
	flag=1;
      }
      if(ni<0||ei>e){
	std::cout << "Error* e value in line " << count+1 <<  " is incorrect\n";
	flag=1;
      }
	  if(flag==1)break;
    }
    count++;
  }
  if(flag==0)std::cout << "no problem" << std::endl;
}
